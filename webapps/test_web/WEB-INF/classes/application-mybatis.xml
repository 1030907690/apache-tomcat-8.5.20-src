<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!-- BoneCP 连接池配置 -->
    <!-- <bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
         <property name="driverClass" value="${jdbc.driverClass}"/>
         <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
         <property name="username" value="${jdbc.username}"/>
         <property name="password" value="${jdbc.password}"/>
         &lt;!&ndash; 连接池中未使用的链接最大存活时间，单位是分，如果要永远存活设置为0 &ndash;&gt;
         <property name="idleMaxAgeInMinutes" value="${jdbc.idleMaxAge}"/>
         &lt;!&ndash; 分区数，默认值2，最小1，推荐3-4，视应用而定 &ndash;&gt;
         <property name="partitionCount" value="${jdbc.partitionCount}"/>
         &lt;!&ndash; 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数 &ndash;&gt;
         <property name="acquireIncrement" value="${jdbc.acquireIncrement}"/>
         &lt;!&ndash; 缓存prepared statements的大小 &ndash;&gt;
         <property name="statementsCacheSize" value="${jdbc.statementsCacheSize}"/>
         &lt;!&ndash; 检查数据库连接池中控线连接的间隔时间，单位是分，如果要取消则设置为0 &ndash;&gt;
         <property name="idleConnectionTestPeriodInMinutes" value="${jdbc.idleConnectionTestPeriod}"/>
         &lt;!&ndash; 每个分区最小的连接数 &ndash;&gt;
         <property name="minConnectionsPerPartition" value="${jdbc.minConnectionsPerPartition}"/>
         &lt;!&ndash; 每个分区最大的连接数 &ndash;&gt;
         <property name="maxConnectionsPerPartition" value="${jdbc.maxConnectionsPerPartition}"/>
     </bean>-->

    <!--开启多条sql执行-->
    <bean id="wallConfig" class="com.alibaba.druid.wall.WallConfig">
        <property name="multiStatementAllow" value="true"/>
    </bean>
    <!--防火墙过滤器-->
    <bean id="wallFilter" class="com.alibaba.druid.wall.WallFilter">
        <property name="config" ref="wallConfig"/>
    </bean>

    <!-- druid数据源配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据库基本信息配置 -->
        <property name="url" value="${druid.url}"/>
        <property name="username" value="${druid.username}"/>
        <property name="password" value="${druid.password}"/>
        <property name="driverClassName" value="${druid.driverClassName}"/>

        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${druid.minIdle}"/>
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${druid.maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>
        <property name="validationQuery" value="${druid.validationQuery}"/>
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/>
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
        <property name="testOnReturn" value="${druid.testOnReturn}"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>
        <!-- 配置监控统计拦截的filters -->
        <!--<property name="filters" value="${druid.filters}"/>-->
        <!--引用防火墙过滤器-->
        <property name="proxyFilters">
            <list>
                <ref bean="wallFilter"/>
            </list>
        </property>

    </bean>


    <!-- 注意：修改configLocation及mapperLocations对应的文件路径 -->
    <bean name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath*:com/zzq/core/**/mapper/xml/*Mapper.xml"/>
    </bean>

    <bean name="mapper" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.zzq.*.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <!-- 配置事物 -->
    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:annotation-driven proxy-target-class="true"/>
    <!-- 多数据源事务管理使用Atomikos -->
</beans>